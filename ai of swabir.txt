//fetch module import
const fetch = (...args) => import("node-fetch").then(({ default: fetch }) => fetch(...args)); // Ensure fetch is available
const GEMINI_API_KEY = "AIzaSyCikEf0U0U17Nsn-gqIaY4hqNxxupBMJ_A"; // 🔑 Replace with your API key

const validateProductWithAI = async (productName) => {
  try {
    console.log(`🔍 Validating product: "${productName}"`);

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: `1. Is "${productName}" a commonly recognized product? Answer only "Yes" or "No".\n` +
                        `2. If it is a real product, is it sold by weight (kg) or by unit (piece)? Answer only "kg" or "unit".`
                }
              ]
            }
          ]
        }),
      }
    );

    // ✅ Check response status before parsing JSON
    if (!response.ok) {
      const errorText = await response.text();
      console.error("❌ Gemini API Error:", errorText);
      throw new Error(`Gemini API Error: ${response.statusText}`);
    }

    // ✅ Parse response as JSON safely
    const data = await response.json();
    console.log("🔍 Gemini API Response:", JSON.stringify(data, null, 2));

    // ✅ Validate API response format
    if (!data.candidates || data.candidates.length === 0) {
      throw new Error("❌ Gemini API returned an empty candidates list.");
    }

    // ✅ Extract AI response text & apply aggressive cleaning
    let aiResponseText = data.candidates[0].content.parts[0].text;
    console.log("🔍 Raw AI Response (Before Cleaning):", aiResponseText);

    // Split into lines first, then clean each line
    let aiResponse = aiResponseText.split("\n")
      .map(line => line.trim())
      .filter(line => line.length > 0)
      .map(line => line.toLowerCase());

    console.log("🔍 Parsed AI Response Array:", aiResponse);

    // ✅ Check if AI response is in the expected format
    if (aiResponse.length < 2) {
      console.error("🚨 Unexpected AI response format! Length:", aiResponse.length);
      return { valid: false, stockType: "unit" };
    }

    // ✅ Extract 'yes'/'no' from first line
    const firstLine = aiResponse[0].replace(/^1\.\s*/, "").trim();
    const isValid = firstLine === "yes";

    // ✅ Extract stock type from second line
    const secondLine = aiResponse[1].replace(/^2\.\s*/, "").trim();
    const stockType = secondLine === "kg" ? "kg" : "unit";

    // ✅ Log final parsed values
    console.log("✅ Final Parsed Values:", { isValid, stockType, firstLine, secondLine });

    return { valid: isValid, stockType };

  } catch (error) {
    console.error("❌ Error validating product with AI:", error.message);
    return { valid: false, stockType: "unit" };
  }
};
